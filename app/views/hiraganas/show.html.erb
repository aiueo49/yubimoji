<%= link_to "戻る", hiraganas_path, class: "link link-neutral" %>
<%= render 'sign_languages', sign_languages: @sign_languages %>
<%= link_to "学習する", study_hiragana_path(@hiragana), class: "link link-neutral", data: { turbo: false } %>
  <!-- スライド速度変更ボタン -->
  <div class="playback-speed-buttons mt-4">
    <button class="btn btn-sm bg-yellow-100" data-speed="0.5">0.5x</button>
    <button class="btn btn-sm bg-yellow-200" data-speed="0.75">0.75x</button>
    <button class="btn btn-sm bg-yellow-300" data-speed="1">1x</button>
    <button class="btn btn-sm bg-yellow-400" data-speed="1.25">1.25x</button>
    <button class="btn btn-sm bg-yellow-500" data-speed="1.5">1.5x</button>
    <button class="btn btn-sm bg-yellow-600" data-speed="2">2x</button>
  </div>

<!-- Swiper JS -->
<script>
  // handleVideoEnd関数の定義
  function handleVideoEnd(video) {
    var swiper = document.querySelector('.swiper-container').swiper;
    if (swiper.activeIndex === swiper.slides.length - 1) {
      video.pause();  // 最後のスライドでは再生を停止する
      video.currentTime = video.duration;  // ビデオを停止された位置に留める
    } else {
      video.currentTime = 0;  // 再生位置を最初に戻す
      video.play().catch(error => console.log('Video play interrupted:', error));  // 再生を開始
    }
  }

  document.addEventListener('DOMContentLoaded', function() {
    var speedButtons = document.querySelectorAll('.playback-speed-buttons button');
    speedButtons.forEach(function(button) {
      button.addEventListener('click', function() {
        var speed = parseFloat(this.getAttribute('data-speed'));
        changeSwiperSpeed(speed);
      });
    });

    // Swiperの初期化
    var swiper = new Swiper('.swiper-container', {
      effect: 'fade',
      spaceBetween: 10,
      loop: false,
      navigation: {
        nextEl: '.swiper-button-next',
        prevEl: '.swiper-button-prev',
      },
      autoplay: {
        delay: 1000,
      },
      centeredSlides: true,
      on: {
        init: function () {
          var firstSlide = this.slides[0];
          var video = firstSlide.querySelector('video');
          if (video) {
            video.play().catch(error => console.log('Video play interrupted:', error));
          }
        },
        slideChange: function () {
          var videos = document.querySelectorAll('video');
          videos.forEach(function(video) {
            video.pause();
          });

          var currentSlide = this.slides[this.activeIndex];
          var video = currentSlide.querySelector('video');
          if (video) {
            video.currentTime = 0;
            setTimeout(() => {
              video.play().catch(error => console.log('Video play interrupted:', error));
            }, 200);  // 再生タイミングを遅らせる
            video.playbackRate = 1;
          }
          if (this.activeIndex === this.slides.length - 1) {
            swiper.autoplay.stop();
          }
        }
      }
    });

    async function changeSwiperSpeed(speed) {
      swiper.autoplay.stop();
      swiper.params.autoplay.delay = 1000 / speed;
      swiper.update();

      var currentSlide = swiper.slides[swiper.activeIndex];
      var video = currentSlide.querySelector('video');
      if (video) {
        video.playbackRate = speed;  // 再生速度を設定
        setTimeout(() => {
          video.play().catch(error => console.log('Video play interrupted:', error));
        }, 200);  // 再生タイミングを遅らせる
      }

      setTimeout(() => {
        swiper.autoplay.start();
      }, 200);
    }

    window.changeSwiperSpeed = changeSwiperSpeed;
  });
</script>
